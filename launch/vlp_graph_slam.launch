<?xml version="1.0"?>
<launch>

  <!-- Sim time -->
  <param name="/use_sim_time" value="true" />

  <!-- arguments -->
  <arg name="nodelet_manager" default="velodyne_nodelet_manager" />
  <arg name="enable_floor_detection" default="true" />
  <arg name="enable_gps" default="false" />
  <arg name="enable_imu_acc" default="false" />
  <arg name="enable_imu_ori" default="false" />

  <arg name="points_topic" default="/velodyne_points" />
  <arg name="map_frame_id" default="map" />
  <arg name="lidar_odom_frame_id" default="odom" />

  <!-- optional arguments -->
  <arg name="enable_robot_odometry_init_guess" default="false" />
  <arg name="robot_odom_frame_id" default="robot_odom" />

  <!-- transformation between lidar and base_link -->
  <!-- rosbag does not have robot state publisher -->
  <node pkg="tf" type="static_transform_publisher" name="lidar2base_publisher" args="0 0 0.45 0 0 0 base_link velodyne 10" />

  <!-- in case you use velodyne_driver, comment out the following line -->
  <node pkg="nodelet" type="nodelet" name="$(arg nodelet_manager)" args="manager" output="screen"/>

  <node pkg="nodelet" type="nodelet" name="velodyne_laserscan_nodelet" args="load velodyne_laserscan/LaserScanNodelet $(arg nodelet_manager)" >
    <param name="ring" value="7" />
    <param name="resolution" value="0.00347521311237808987"/>
  </node>

  <!-- prefiltering_nodelet -->
  <node pkg="nodelet" type="nodelet" name="prefiltering_nodelet" args="load hdl_graph_slam/PrefilteringNodelet $(arg nodelet_manager)">
    <remap from="/velodyne_points" to="$(arg points_topic)" />
    <!-- in case base_link_frame is blank, mapping will be performed in the lidar frame -->
    <param name="base_link_frame" value="base_link" /> <!-- Default value: base_link -->
    <!-- distance filter -->
    <param name="use_distance_filter" value="true" />
    <param name="distance_near_thresh" value="0.5" />
    <param name="distance_far_thresh" value="100.0" /> <!-- Default value: 100.0 -->
    <!-- NONE, VOXELGRID, or APPROX_VOXELGRID -->
    <param name="downsample_method" value="VOXELGRID" />
    <param name="downsample_resolution" value="0.1" />
    <!-- NONE, RADIUS, or STATISTICAL -->
    <param name="outlier_removal_method" value="RADIUS" />
    <param name="statistical_mean_k" value="30" />
    <param name="statistical_stddev" value="1.2" />
    <param name="radius_radius" value="0.5" />
    <param name="radius_min_neighbors" value="2" />
  </node>

  <!-- scan_matching_odometry_nodelet -->
  <node pkg="nodelet" type="nodelet" name="scan_matching_odometry_nodelet" args="load hdl_graph_slam/ScanMatchingOdometryNodelet $(arg nodelet_manager)">
    <param name="points_topic" value="$(arg points_topic)" />
    <param name="odom_frame_id" value="$(arg lidar_odom_frame_id)" />
    <param name="robot_odom_frame_id" value="$(arg robot_odom_frame_id)" />
    <param name="keyframe_delta_trans" value="0.2" />
    <param name="keyframe_delta_angle" value="0.15" />
    <param name="keyframe_delta_time" value="30.0" />
    <param name="transform_thresholding" value="false" />
    <param name="enable_robot_odometry_init_guess" value="$(arg enable_robot_odometry_init_guess)" />
    <param name="max_acceptable_trans" value="1.0" />
    <param name="max_acceptable_angle" value="1.0" />
    <param name="downsample_method" value="NONE" />
    <param name="downsample_resolution" value="0.1" />
    <!-- ICP, GICP, NDT, GICP_OMP, NDT_OMP, FAST_GICP(recommended), or FAST_VGICP -->
    <param name="registration_method" value="FAST_GICP" />
    <param name="reg_num_threads" value="6" />
    <param name="reg_transformation_epsilon" value="0.001"/>
    <param name="reg_maximum_iterations" value="100"/>
    <param name="reg_max_correspondence_distance" value="1.6"/>
    <param name="reg_max_optimizer_iterations" value="32"/>
    <param name="reg_use_reciprocal_correspondences" value="false"/>
    <param name="reg_correspondence_randomness" value="20"/>
    <param name="reg_resolution" value="1.0" />
    <param name="reg_nn_search_method" value="DIRECT7" />
  </node>

  <!-- floor_detection_nodelet -->
  <node pkg="nodelet" type="nodelet" name="floor_detection_nodelet" args="load hdl_graph_slam/FloorDetectionNodelet $(arg nodelet_manager)" if="$(arg enable_floor_detection)">
    <param name="points_topic" value="$(arg points_topic)" />
    <param name="tilt_deg" value="-0.5" />
    <param name="sensor_height" value="0" />
    <param name="height_clip_range" value="0.05" />
    <param name="floor_pts_thresh" value="256" />
    <param name="use_normal_filtering" value="true" />
    <param name="normal_filter_thresh" value="20.0" />
  </node>

  <!-- hdl_graph_slam_nodelet -->
  <node pkg="nodelet" type="nodelet" name="hdl_graph_slam_nodelet" args="load hdl_graph_slam/HdlGraphSlamNodelet $(arg nodelet_manager)">
    <param name="points_topic" value="$(arg points_topic)" />
    <!-- frame settings -->
    <param name="map_frame_id" value="$(arg map_frame_id)" />
    <param name="odom_frame_id" value="$(arg lidar_odom_frame_id)" />
    <!-- optimization params -->
    <!-- typical solvers: gn_var, gn_fix6_3, gn_var_cholmod, lm_var, lm_fix6_3, lm_var_cholmod, ... -->
    <param name="g2o_solver_type" value="gn_fix6_3" /> <!-- default value: lm_var_cholmod -->
    <param name="g2o_solver_num_iterations" value="1024" />
    <!-- constraint switches -->
    <param name="enable_gps" value="$(arg enable_gps)" />
    <param name="enable_imu_acceleration" value="$(arg enable_imu_acc)" />
    <param name="enable_imu_orientation" value="$(arg enable_imu_ori)" />
    <!-- keyframe registration params -->
    <param name="max_keyframes_per_update" value="20" />
    <param name="keyframe_delta_trans" value="1.0" />
    <param name="keyframe_delta_angle" value="1.5" />
    <!-- fix first node for optimization stability -->
    <param name="fix_first_node" value="true"/>
    <param name="fix_first_node_stddev" value="10 10 10 1 1 1"/>
    <param name="fix_first_node_adaptive" value="true"/>
    <!-- loop closure params -->
    <param name="distance_thresh" value="1.5" />
    <param name="accum_distance_thresh" value="3.0" />
    <param name="min_edge_interval" value="1.0" />
    <param name="fitness_score_thresh" value="0.5" />
    <!-- scan matching params -->
    <param name="registration_method" value="FAST_GICP" />
    <param name="reg_num_threads" value="4" />
    <param name="reg_transformation_epsilon" value="0.01"/>
    <param name="reg_maximum_iterations" value="100"/>
    <param name="reg_max_correspondence_distance" value="2.0"/>
    <param name="reg_max_optimizer_iterations" value="32"/>
    <param name="reg_use_reciprocal_correspondences" value="false"/>
    <param name="reg_correspondence_randomness" value="20"/>
    <param name="reg_resolution" value="1.0" />
    <param name="reg_nn_search_method" value="DIRECT7" />
    <!-- edge params -->
    <!-- GPS -->
    <param name="gps_edge_robust_kernel" value="NONE" />
    <param name="gps_edge_robust_kernel_size" value="1.0" />
    <param name="gps_edge_stddev_xy" value="20.0" />
    <param name="gps_edge_stddev_z" value="5.0" />
    <!-- IMU orientation -->
    <param name="imu_orientation_edge_robust_kernel" value="NONE" />
    <param name="imu_orientation_edge_stddev" value="1.0" />
    <!-- IMU acceleration (gravity vector) -->
    <param name="imu_acceleration_edge_robust_kernel" value="NONE" />
    <param name="imu_acceleration_edge_stddev" value="1.0" />
    <!-- ground plane -->
    <param name="floor_edge_robust_kernel" value="NONE" />
    <param name="floor_edge_stddev" value="10.0" />
    <!-- scan matching -->
    <!-- robust kernels: NONE, Cauchy, DCS, Fair, GemanMcClure, Huber, PseudoHuber, Saturated, Tukey, Welsch -->
    <param name="odometry_edge_robust_kernel" value="NONE" />
    <param name="odometry_edge_robust_kernel_size" value="1.0" />
    <param name="loop_closure_edge_robust_kernel" value="Huber" />
    <param name="loop_closure_edge_robust_kernel_size" value="1.0" />
    <param name="use_const_inf_matrix" value="false" />
    <param name="const_stddev_x" value="0.5" />
    <param name="const_stddev_q" value="0.1" />
    <param name="var_gain_a" value="20.0" />
    <param name="min_stddev_x" value="0.1" />
    <param name="max_stddev_x" value="5.0" />
    <param name="min_stddev_q" value="0.05" />
    <param name="max_stddev_q" value="0.2" />
    <!-- update params -->
    <param name="graph_update_interval" value="0.2" />
    <param name="map_cloud_update_interval" value="3.0" />
    <param name="map_cloud_resolution" value="0.05" />
  </node>

  <node pkg="hdl_graph_slam" type="map2odom_publisher.py" name="map2odom_publisher" />

  <!-- <param name="use_sim_time" value="true"/> -->

  <!-- Start octomap server -->
  <node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
    <param name="resolution" value="0.05" />

    <!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
    <param name="frame_id" type="string" value="map" />
    <param name="base_frame_id" type="string" value="velodyne" />

    <param name="height_map" value="true" />

    <param name="sensor_model/max_range" value="15.0" />
    <param name="sensor_model/hit" value="0.7" />
    <param name="sensor_model/miss" value="0.4" />  
    <param name="sensor_model/min" value="0.12" />
    <param name="sensor_model/max" value="0.97" />
    
    <param name="latch" value="true" />
    
    <param name="filter_ground" value="true" />
    <param name="ground_filter/distance" value="0.1" />
    <param name="ground_filter/angle" value="0.15" />
    <param name="ground_filter/plane_distance" value="0.45" />

    <param name="pointcloud_min_z" value="0.0" />
    
    <param name="occupancy_min_z" value="0.0" />
    <param name="occupancy_max_z" value="1.5" />

    <param name="incremental_2D_projection" value="true" />
    

    <!-- data source to integrate (PointCloud2) -->
    <remap from="cloud_in" to="/velodyne_points" />
  </node>

  <node pkg="magni_octonav" type="map_grid_projector" name="map_grid_projector_node" output="screen" >
    <param name="world_frame" value="$(arg map_frame_id)"/>
    <param name="base_frame" value="velodyne"/>

    <param name="min_scan_range" value="0.3"/>
    <param name="max_scan_range" value="15.0"/>

    <param name="resolution" value="0.05"/>
  </node>

</launch>
